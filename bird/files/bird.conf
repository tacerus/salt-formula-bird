{%- from "bird/map.jinja" import server with context %}

{%- macro filter(name, rules) %}
filter {{ name }} {
  {%- if 'pre' in rules %}
  {%- for action in rules.pop('pre') %}
  {{ action }};
  {%- endfor %}
  {%- endif %}
  {%- if 'post' in rules %}
  {%- set rules_post = rules.pop('post') %}
  {%- else %}
  {%- set rules_post = None %}
  {%- endif %}

  {%- for condition, actions in rules.items() %}
  if {{ condition }} then {
    {%- if actions is iterable and actions is not string %}
    {%- for action in actions %}
    {{ action }};
    {%- endfor %}
    {%- else %}
    {%- do salt.log.error('BIRD: cannot parse actions') %}
    {%- endif %}
  }
  {%- endfor %} {#- close rule loop #}

  {%- if rules_post %}
  {%- for action in rules_post %}
  {{ action }};
  {%- endfor %}
  {%- endif %}
}
{%- endmacro %}

{%- for definition, contents in server.get('definitions', {}).items() %}
define {{ definition }} = [
  {%- if contents is string %}
  {{ contents }}
  {%- elif contents is iterable and contents is not mapping %}
  {%- for line in contents %}
  {{ line }}{{ ',' if not loop.last else '' }}
  {%- endfor %}
  {%- else %}
  {%- do salt.log.error('BIRD: cannot parse definition') %}
  {%- endif %}
];
{%- endfor %}

{%- for filter_name, filter_rule in server.get('filters', {}).items() %}
{{ filter(filter_name, filter_rule) }}
{%- endfor %}

{%- for log_target, log_filter in server.get('logs', {}).items() %}
{%- if '/' in log_target %}
{%- set log_target = '"' ~ log_target ~ '"' %}
{%- endif %}
log {{ log_target }}
{%- if log_filter is string -%}
{{ ' ' ~ log_filter }}
{%- else -%}
{{ ' ' }}{ {{ ', '.join(log_filter) }} }
{%- endif -%}
;
{%- endfor %}


{%- if 'router_id' in server %}
router id {{ server['router_id'] }};
{%- endif %}

{%- for watchdog_type, watchdog_time in server.get('watchdogs', {}).items() %}
watchdog {{ watchdog_type }} {{ watchdog_time }};
{%- endfor %}

protocol device {
}


{%- for protocol_name, protocol in server.get('protocols', {}).items() %}

{%- if 'type' in protocol %}
{%- set name = protocol_name %}
{%- set type = protocol.type %}
{%- else %}
{%- set name = None %}
{%- set type = protocol_name %}
{%- endif %}

protocol {{ type }}{{ ' v' ~ protocol.pop('version') if 'version' in protocol else '' }}{{ ' ' ~ name if name and type not in ['kernel', 'static'] else '' }} {

  {%- if type in ['direct', 'kernel', 'ospf', 'ospf4', 'ospf6', 'static'] %}

  {%- if 'family' in protocol %}
  {{ protocol['family'] }};
  {%- else %}

  {%- for family in [4, 6] %}
  {%- set family = 'ipv' ~ family %}

  {%- if family in protocol %}
  {%- set family_config = protocol[family] %}
  {{ family }} {%- if family_config is string or family_config is none -%};{%- elif family_config is mapping -%}{{ ' {' }}{%- else -%}{%- do salt.log.error('BIRD: Cannot map family') -%}{%- endif %}

    {%- if family_config is mapping %}
    {%- if 'table' in family_config %}
    table {{ protocol[family]['table'] }};
    {%- endif %}

    {%- if 'filters' in family_config %}
    {%- if protocol[family]['filters'] is mapping %}
    {%- do salt.log.error('BIRD: Please define filters using the "bird:filters" pillar') %}
    {%- else %}
    {%- for filter in family_config['filters'] %}
    {{ filter }};
    {%- endfor %}
    {%- endif %} {#- close filters mapping check #}
    {%- endif %} {#- close filters in family check #}
  };
  {%- endif %} {#- close family mapping check #}
  {%- endif %} {#- close family in protocol check #}

  {%- endfor %} {#- close family loop #}

  {%- endif %} {#- close family check #}

  {%- if type == 'kernel' %}
  {%- if protocol.get('learn', False) %}
  learn;
  {%- endif %}
  {%- if 'kernel' in protocol and 'table' in protocol.kernel %}
  kernel table {{ protocol.kernel.table }};
  {%- endif %}
  {%- endif %} {#- close protocol==kernel check #}

  {%- for route_destination, route_gateway in protocol.get('routes', {}).items() %}
  route {{ route_destination }} via {{ route_gateway }};
  {%- endfor %}

  {%- for area_name, area in protocol.get('areas', {}).items() %} 
  area {{ area_name }} {
    {%- for interface_name, interface in area.get('interfaces', {}).items() %}
    interface "{{ interface_name }}" {
      {%- for key, value in interface %} %}
      {{ key }}: {{ value }};
      {%- endfor %}
    {%- endfor %} {#- close interfaces loop #}
  };
  {%- endfor %} {#- close areas loop #}

  {%- endif %} {#- close protocol check #}
}

{%- endfor %} {#- close protocols loop #}
